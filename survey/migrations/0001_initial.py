# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-06-23 20:40
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='HY_Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniq', models.PositiveIntegerField(blank=True, null=True, verbose_name='Unique ID')),
                ('bl_id', models.CharField(blank=True, max_length=10, null=True, verbose_name='Building ID')),
                ('addr', models.CharField(max_length=200, verbose_name='Address')),
                ('gps_x', models.DecimalField(decimal_places=7, max_digits=9, verbose_name='Latitude')),
                ('gps_y', models.DecimalField(decimal_places=7, max_digits=9, verbose_name='Longtitude')),
                ('oc_day', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Day')),
                ('oc_night', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Night')),
                ('oc_navl', models.BooleanField(verbose_name='Not Available?')),
                ('no_floor', models.DecimalField(decimal_places=0, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='No. of Floors')),
                ('bas_prsnt', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Basement')),
                ('yr_constr', models.DecimalField(blank=True, decimal_places=0, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2017)], verbose_name='Year of Construction')),
                ('yr_aval', models.BooleanField(verbose_name='Not Available?')),
                ('yr_extn', models.DecimalField(blank=True, decimal_places=0, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2017)], verbose_name='Year of Extension (If Any)')),
                ('bl_use', models.CharField(choices=[('Residential', 'Residential'), ('Commercial', 'Commercial'), ('Mixed', 'Mixed'), ('Others', 'Others')], max_length=50, verbose_name='Building Use')),
                ('op_bl_use', models.CharField(blank=True, max_length=50, null=True, verbose_name='If Others, Specify')),
                ('acc_level', models.CharField(choices=[('FULL', 'FULL'), ('PARTIAL', 'PARTIAL'), ('NO', 'NO')], max_length=10, verbose_name='Access Level')),
                ('s_zone', models.PositiveIntegerField(choices=[(1, 'II and III'), (2, 'IV'), (3, 'V')], verbose_name='Seismic Zone')),
                ('dt_tkn', models.DateTimeField(blank=True, verbose_name='Taken On')),
                ('soil_cn', models.IntegerField(choices=[(0, 'Medium'), (1, 'Hard'), (-1, 'Soft')], verbose_name='Soil Condtition')),
                ('sign_url', models.CharField(max_length=300, validators=[django.core.validators.URLValidator])),
                ('perf_score', models.IntegerField(blank=True, verbose_name='Performance Score')),
            ],
            options={
                'verbose_name': 'Hybrid Building',
                'verbose_name_plural': 'Hybrid Buildings',
            },
        ),
        migrations.CreateModel(
            name='MS_Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniq', models.PositiveIntegerField(blank=True, null=True, verbose_name='Unique ID')),
                ('bl_id', models.CharField(blank=True, max_length=10, null=True, verbose_name='Building ID')),
                ('addr', models.CharField(max_length=200, verbose_name='Address')),
                ('gps_x', models.DecimalField(decimal_places=7, max_digits=9, verbose_name='Latitude')),
                ('gps_y', models.DecimalField(decimal_places=7, max_digits=9, verbose_name='Longtitude')),
                ('oc_day', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Day')),
                ('oc_night', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Night')),
                ('oc_navl', models.BooleanField(verbose_name='Not Available?')),
                ('no_floor', models.DecimalField(decimal_places=0, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='No. of Floors')),
                ('bas_prsnt', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Basement')),
                ('yr_constr', models.DecimalField(blank=True, decimal_places=0, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2017)], verbose_name='Year of Construction')),
                ('yr_aval', models.BooleanField(verbose_name='Not Available?')),
                ('yr_extn', models.DecimalField(blank=True, decimal_places=0, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2017)], verbose_name='Year of Extension (If Any)')),
                ('ty_const', models.CharField(choices=[('Brick Masonary', 'Brick Masonary'), ('Composite', 'Composite')], max_length=50, verbose_name='Type of Construction')),
                ('bl_use', models.CharField(choices=[('Residential', 'Residential'), ('Commercial', 'Commercial'), ('Mixed', 'Mixed'), ('Others', 'Others')], max_length=50, verbose_name='Building Use')),
                ('op_bl_use', models.CharField(blank=True, max_length=50, null=True, verbose_name='If Others, Specify')),
                ('acc_level', models.CharField(choices=[('FULL', 'FULL'), ('PARTIAL', 'PARTIAL'), ('NO', 'NO')], max_length=10, verbose_name='Access Level')),
                ('s_zone', models.PositiveIntegerField(choices=[(1, 'II and III'), (2, 'IV'), (3, 'V')], verbose_name='Seismic Zone')),
                ('dt_tkn', models.DateTimeField(blank=True, verbose_name='Taken On')),
                ('sign_url', models.CharField(max_length=300, validators=[django.core.validators.URLValidator])),
                ('perf_score', models.IntegerField(blank=True, verbose_name='Performance Score')),
                ('str_irr', models.PositiveIntegerField(blank=True, choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Structural Irregularities')),
                ('lck_wll', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Lack of Adequate Walls in both Orthogonal Directions')),
                ('hvy_ovh', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Heavy Overhangs')),
                ('re_crn', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Re-entrant Corners')),
                ('crn_bld', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Corner Building')),
                ('prt_opn', models.PositiveIntegerField(choices=[(0, 'Small (< 1/3)'), (1, 'Moderate (1/3 to 2/3)'), (2, 'Large (> 2/3)')], verbose_name='Percentage of Openings')),
                ('irr_opn', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Irregularly Placed Openings')),
                ('opn_crn', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Openings at Corners of Bearing Wall Interactions')),
                ('diap_ac', models.PositiveIntegerField(blank=True, choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Diaphragm Action')),
                ('ab_diap', models.PositiveIntegerField(choices=[(1, 'Yes'), (0, 'No')], verbose_name='Absence of Diaphragms')),
                ('lrg_cut', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Large Cut-outs in Diaphragm')),
                ('hrz_bnd', models.PositiveIntegerField(blank=True, choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Horizontal Bands')),
                ('plnt_lvl', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Plinth Level')),
                ('lntl_lvl', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Lintel Level')),
                ('sill_lvl', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Sill Level')),
                ('roof_lvl', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Roof Level')),
                ('arch', models.PositiveIntegerField(blank=True, choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Arches')),
                ('arches', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Arches')),
                ('jck_roof', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Jack Arch Roofs')),
                ('ap_qlt', models.PositiveIntegerField(blank=True, choices=[(0, 'Good'), (1, 'Moderate'), (2, 'Poor')], verbose_name='Apparent Quality')),
                ('ql_mat', models.PositiveIntegerField(choices=[(0, 'Good'), (1, 'Moderate'), (2, 'Poor')], verbose_name='Apparent Quality of Construction and Materials')),
                ('maintc', models.PositiveIntegerField(choices=[(0, 'Good'), (1, 'Moderate'), (2, 'Poor')], verbose_name='Maintainence')),
                ('pnding', models.PositiveIntegerField(blank=True, choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Pounding')),
                ('un_flr', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Unaligned Floors')),
                ('pr_qlt', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Poor Apparent Quality of Adjacent Buildings')),
                ('soil_cn', models.PositiveIntegerField(choices=[(0, 'Medium'), (1, 'Hard'), (-1, 'Soft')], verbose_name='Soil Condition')),
                ('rub_wll', models.PositiveIntegerField(blank=True, choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Random Rubble Stone Masonary')),
                ('thk_wll', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], default=0, verbose_name='Thick Walls 600mm or Above')),
                ('rnd_stn', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], default=0, verbose_name='Use of Rounded Stone')),
                ('hvy_roof', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], default=0, verbose_name='Heavy Roofs on URRM Walls')),
                ('rf_sign', models.NullBooleanField(default=False, verbose_name='Marquees/Hoardings/Roof Signs')),
                ('ac_grl', models.NullBooleanField(default=False, verbose_name='AC Units/Grillwork')),
                ('el_prp', models.NullBooleanField(default=False, verbose_name='Elaborate Parapets')),
                ('hv_elf', models.NullBooleanField(default=False, verbose_name='Heavy Elevation Features')),
                ('hv_cnp', models.NullBooleanField(default=False, verbose_name='Heavy Canopies')),
                ('sb_bal', models.NullBooleanField(default=False, verbose_name='Substantial Balconies')),
                ('hv_cld', models.NullBooleanField(default=False, verbose_name='Heavy Cladding')),
                ('str_gl', models.NullBooleanField(default=False, verbose_name='Structural Glazing')),
            ],
            options={
                'verbose_name': 'Masonary Building',
                'verbose_name_plural': 'Masonary Buildings',
            },
        ),
        migrations.CreateModel(
            name='RC_Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniq', models.PositiveIntegerField(blank=True, null=True, verbose_name='Unique ID')),
                ('bl_id', models.CharField(blank=True, max_length=10, null=True, verbose_name='Building ID')),
                ('addr', models.CharField(max_length=200, verbose_name='Address')),
                ('gps_x', models.DecimalField(decimal_places=7, max_digits=9, verbose_name='Latitude')),
                ('gps_y', models.DecimalField(decimal_places=7, max_digits=9, verbose_name='Longtitude')),
                ('oc_day', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Day')),
                ('oc_night', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Night')),
                ('oc_navl', models.BooleanField(verbose_name='Not Available?')),
                ('no_floor', models.DecimalField(decimal_places=0, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='No. of Floors')),
                ('bas_prsnt', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Basement')),
                ('yr_constr', models.DecimalField(blank=True, decimal_places=0, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2017)], verbose_name='Year of Construction')),
                ('yr_aval', models.BooleanField(verbose_name='Not Available?')),
                ('yr_extn', models.DecimalField(blank=True, decimal_places=0, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2017)], verbose_name='Year of Extension (If Any)')),
                ('bl_use', models.CharField(choices=[('Residential', 'Residential'), ('Commercial', 'Commercial'), ('Mixed', 'Mixed'), ('Others', 'Others')], max_length=50, verbose_name='Building Use')),
                ('op_bl_use', models.CharField(blank=True, max_length=50, null=True, verbose_name='If Others, Specify')),
                ('acc_level', models.CharField(choices=[('FULL', 'FULL'), ('PARTIAL', 'PARTIAL'), ('NO', 'NO')], max_length=10, verbose_name='Access Level')),
                ('s_zone', models.PositiveIntegerField(choices=[(1, 'II and III'), (2, 'IV'), (3, 'V')], verbose_name='Seismic Zone')),
                ('dt_tkn', models.DateTimeField(blank=True, verbose_name='Taken On')),
                ('soil_cn', models.IntegerField(choices=[(0, 'Medium'), (1, 'Hard'), (-1, 'Soft')], verbose_name='Soil Condtition')),
                ('sign_url', models.CharField(max_length=300, validators=[django.core.validators.URLValidator])),
                ('perf_score', models.IntegerField(blank=True, verbose_name='Performance Score')),
                ('shr_col', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Short Column')),
                ('frm_act', models.PositiveIntegerField(choices=[(-1, 'Absent'), (1, 'Present'), (0, 'Not Sure')], verbose_name='Frame Action')),
                ('soft_st', models.PositiveIntegerField(blank=True, choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Soft Storey')),
                ('op_prk', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Open Parking at Ground Level')),
                ('ab_prt', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Absence of Partition Walls in Ground or Any Intermediate')),
                ('st_shp', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Storey for Shops or Other Commercial Use')),
                ('tl_htg', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Taller Height in Ground or Any Other Intermediate Storey')),
                ('vrt_irr', models.PositiveIntegerField(blank=True, choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Vertical Irregularities')),
                ('pr_stb', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Presence of Setback')),
                ('bl_slp', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Building on Sloppy Ground')),
                ('pl_irr', models.PositiveIntegerField(blank=True, choices=[(0, 'None'), (1, 'Moderate'), (2, 'Extreme')], verbose_name='Plan Irregularities')),
                ('ir_plc', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Irregular Plan Configuration')),
                ('re_crn', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Re-Entrant Corners')),
                ('hvy_ovh', models.PositiveIntegerField(blank=True, choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Heavy Overhangs')),
                ('md_hrp', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Moderate Horizontal Projections')),
                ('sb_hrp', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Substantial Horizontal Projections')),
                ('ap_qlt', models.PositiveIntegerField(blank=True, choices=[(0, 'Good'), (1, 'Moderate'), (2, 'Poor')], verbose_name='Apparent Quality')),
                ('ql_mat', models.PositiveIntegerField(choices=[(0, 'Good'), (1, 'Moderate'), (2, 'Poor')], verbose_name='Apparent Quality of Construction and Materials')),
                ('maintc', models.PositiveIntegerField(choices=[(0, 'Good'), (1, 'Moderate'), (2, 'Poor')], verbose_name='Maintainence')),
                ('pnding', models.PositiveIntegerField(blank=True, choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Pounding')),
                ('un_flr', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Unaligned Floors')),
                ('pr_qlt', models.PositiveIntegerField(choices=[(0, 'Absent'), (1, 'Present')], verbose_name='Poor Apparent Quality of Adjacent Buildings')),
                ('rf_sign', models.NullBooleanField(default=False, verbose_name='Marquees/Hoardings/Roof Signs')),
                ('ac_grl', models.NullBooleanField(default=False, verbose_name='AC Units/Grillwork')),
                ('el_prp', models.NullBooleanField(default=False, verbose_name='Elaborate Parapets')),
                ('hv_elf', models.NullBooleanField(default=False, verbose_name='Heavy Elevation Features')),
                ('hv_cnp', models.NullBooleanField(default=False, verbose_name='Heavy Canopies')),
                ('sb_bal', models.NullBooleanField(default=False, verbose_name='Substantial Balconies')),
                ('hv_cld', models.NullBooleanField(default=False, verbose_name='Heavy Cladding')),
                ('str_gl', models.NullBooleanField(default=False, verbose_name='Structural Glazing')),
            ],
            options={
                'verbose_name': 'RC Building',
                'verbose_name_plural': 'RC Buildings',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2, unique=True)),
                ('mem_1', models.CharField(max_length=50, verbose_name='Member 1')),
                ('mem_2', models.CharField(blank=True, max_length=50, verbose_name='Member 2')),
                ('mem_3', models.CharField(blank=True, max_length=50, verbose_name='Member 3')),
                ('mem_4', models.CharField(blank=True, max_length=50, verbose_name='Member 4')),
            ],
        ),
        migrations.AddField(
            model_name='rc_building',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='survey.Team'),
        ),
        migrations.AddField(
            model_name='ms_building',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='survey.Team'),
        ),
        migrations.AddField(
            model_name='hy_building',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='survey.Team'),
        ),
    ]
